



Introduction


Filecalibur is a tool that can serve many purpuses, as long as files and folder structures are involved. The key to understand Filecaliburs capabilities is to seperate the concept of a file and its associated hash:

File
A file is a sequence of binary 0/1 numbers (Bits) on a storage system. Usually the files are structured in folders for a better overview. Files can be short as a few Byte (Byte = 8 0/1 binary numbers) or large as several Gigabyte (1 Gigabyte = 1 000 000 000 Byte). We should consider that each single Byte is important and if its modified the content of the file will change. Worst case, the file will be corrupt and the content will be useless.

Hash
I keep things simple here, so lets think of an Hash as a fingerprint of a file. Actually it is a mathematical function that sums up the entire file and the result is a cryptic number/letter combination. There are several hash functions which return different results , for example a hash with the function md5 might look as d41d8cd98f00b204e9800998ecf8427e and a hash of the function sha1 like da39a3ee5e6b4b0d3255bfef95601890afd80709. 
Three things are essential here:
1) The hash of a certain function is allways of the same length independent of the file size.
2) Each single Bit is part of the hash and if it is changed, the  hash will be totally different.
3) The hash is unique for each file, but identical for copies of files, independent of the file name.
Actually, in extreme rare cases different files can have the same hash, what is called a collision. For this application collisions can be ignored.

Filecalibur can calculate this hashes for all files of a certain folder even including all files in subfolder. To be acurate, Filecalibur only collects your input and runs a independent software hashdeep which performes the hash calculation and writes its results in a text file, which I name a collection. In this collection, each line coresponds to one file. It has the information on the file size, the different hash information and the filename with the path. A nice feature is the independence of this information from the software used to calculate them. A file will have the same size, hash or path/name information if its calculated with any other software. Filecalibur can display this informations and manipulate them. 
At this point, we stop working with the real files and focus on the text document with the fingerprints of the files, the hashes, instead. Identical files can be identified by screening for identical hashes calculated by different files. Subfolder can be extracted or removed based on the path/name information. But the real power is in comparison of different collections by positive and negative matching:

Positive Matching
One collection A is checked hash by hash if the hash IS present in collection B. Only if the hash IS present, the file information is written in collection C. This function is useful to identify redundant files between different collections.

Negative Matching
One collection A is checked hash by hash if the hash is NOT present in collection B. Only if the hash is NOT present, the file information is written in collection C. This function is useful to identify unique files in a collection. Be aware that in the example above we only find files present in collection A but not present in collection B. Files present in collection B that are not present in collection A are lost/ignored. If this files are of interest, the collections have to be switched.

Dangerous Functions
Ultimately, Filecalibur can use such a collection to delete each single file in the collection. At this point the files are looked up and files are removed from the drive or were they are stored.


Functions

In this section we walk through the essential functionality of Filecalibur.

Hash Calculation
Select hashDeep->Calculate Hashes from the menue. In the dialog window you have to provide the folder to hash and the file were to save the collection data. Based on this information hashdeep calculates the hashes. Filecalibur will display the collection once hashdeep is ready. Be aware that each file has to be read completely to calculate the hash information. If Terabytes of data are processed this calculation may run several hours or days. In this case it may be apropriate to run the hash calculation over night.

Collection - Modify Path
Select Collection->Modify Path from the menue. In the dialog window you have to provide the collection file which is usually prefilled with the current file. Last the file were to save the collection data needs to be provided. The fields in between can be used to modify the path/name information by removing or adding something to it. Keep in mind that you work on the left part of the text which corespond to the top level folders. This can be used to modify the root folder name or remove it to get relative information. Or the letter of the drive can be changed.
Finally the order of the files can be sorted. This is useful because files may get out of order due to the time required for hashing. Sorting in combination with switching the slashes can get the file into order suitable for comparison.

Collection - Remove Path
Select Collection->Remove Path from the menue. In the dialog window you have to provide the collection file which is usually prefilled with the current file. Last the file were to save the collection data needs to be provided. The fields in the middle you have to provide the path to remove. All entries with the same path/name information are removed and only the non matching are saved in the new collection. Usefull to remove a subfolder from a collection and keep the rest.

Collection - Extract Path
Select Collection->Extract Path from the menue. In the dialog window you have to provide the collection file which is usually prefilled with the current file. Last the file were to save the collection data needs to be provided. The fields in the middle you have to provide the path to extract. All entries with the same path/name information are saved in the new collection and all non matching are discarded. Usefull to extract only a subfolder into a new collection.

Collection - Join Files
Select Collection->Join Files from the menue. In the dialog window you have to provide the collection file which is usually prefilled with the current file and a second input file. Last the file were to save the collection data needs to be provided. Both files are joined and saved in the new collection. Usefull to add a folder to a collection.

Collection - Positive Hashing
Select Collection->Positive Hashing from the menue. In the dialog window you have to provide the test collection file which is usually prefilled with the current file. Second you provide the hash library collection. Last the file were to save the collection data needs to be provided. The test collection is checked hash by hash if the hash IS present in hash library collection. Only if the hash IS present, the file information is written in the new collection. Useful to identify identical files between different collections.

Collection - Negative Hashing
Select Collection->Negative Hashing from the menue. In the dialog window you have to provide the test collection file which is usually prefilled with the current file. Second you provide the hash library collection. Last the file were to save the collection data needs to be provided. The test collection is checked hash by hash if the hash is NOT present in hash library collection. Only if the hash is NOT present, the file information is written in the new collection. Useful to identify unknown files in the test collection. Be aware that in the example above we only find files present in the test collection but not present in hash library collection. Files present in hash library collection that are not present in test collection are lost/ignored. If this files are of interest, the collections have to be switched.






Examples of Usage

In this section we focus on scenarios were Filecalibur might be useful.







